(ns euler.problem12)

;; The sequence of triangle numbers is generated by adding the natural
;; numbers:
;;
;; So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
;; The first ten terms would be:
;;
;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;;
;; Let us list the factors of the first seven triangle numbers:
;;
;;  1: 1
;;  3: 1,3
;;  6: 1,2,3,6
;; 10: 1,2,5,10
;; 15: 1,3,5,15
;; 21: 1,3,7,21
;; 28: 1,2,4,7,14,28
;;
;; We can see that 28 is the first triangle number to have over five
;; divisors. What is the value of the first triangle number to have
;; over five hundred divisors?

(defn euler-12 []

  ;; naive, slow version
  (defn count-divisors-naive [x]
    (count (filter #(= 0 (rem x %1)) (range 1 (inc x)))))

  (defn count-divisors [x]
    (loop [i 1 divisors #{}]
      (if (> (* i i) x) ;; this makes it fast
        (count divisors)
        (if (= (rem x i) 0)
          ;; keep i and x/i as divisors in a SET to discard duplicates
          (recur (inc i) (conj (conj divisors i) (/ x i)))
          (recur (inc i) divisors)))))

  (defn triangle[x] (/ (* x (inc x)) 2))

  (loop [i 1 n (triangle 1)]
    (let [num-divs (count-divisors n)]
      ;; (println (str "triangle(" i ")=" n ": " num-divs " divs." ))

    (if (> num-divs 500) ;; 500
             [i n]
        (recur (inc i) (+ n (inc i)))))))

(println (euler-12))
