(ns euler.core)

;; If we list all the natural numbers below 10 that are multiples
;; of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
;; Find the sum of all the multiples of 3 or 5 below 1000.

(defn euler-1 []
  (reduce
   +
   (filter #(or (zero? (mod %1 3)) (zero? (mod %1 5)))
           (range 1 1000))))

;; $ lein repl
;; user=> (use 'euler.core)
;; nil
;; user=> (euler-1)
;; 233168

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Each new term in the Fibonacci sequence is generated by adding the previous
;; two terms. By starting with 1 and 2, the first 10 terms will be:
;;
;;   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;
;; By considering the terms in the Fibonacci sequence whose values do not exceed
;; four million, find the sum of the even-valued terms.

(defn euler-2 []
  (defn fib-up-to
    ([x] (fib-up-to [1 2] x))
    ([y x] (let [z (+ (last y) (last (butlast y)))]
             (if
                 (> z x) y
                 (fib-up-to (conj y z) x)))))

  (reduce + (filter even? (fib-up-to 4000000))))