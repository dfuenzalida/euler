(ns euler.core)

;; If we list all the natural numbers below 10 that are multiples
;; of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
;; Find the sum of all the multiples of 3 or 5 below 1000.

(defn euler-1 []
  (reduce
   +
   (filter #(or (zero? (mod %1 3)) (zero? (mod %1 5)))
           (range 1 1000))))

;; $ lein repl
;; user=> (use 'euler.core)
;; nil
;; user=> (euler-1)
;; 233168

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Each new term in the Fibonacci sequence is generated by adding the previous
;; two terms. By starting with 1 and 2, the first 10 terms will be:
;;
;;   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;
;; By considering the terms in the Fibonacci sequence whose values do not exceed
;; four million, find the sum of the even-valued terms.

(defn euler-2 []
  (defn fib-up-to
    ([x] (fib-up-to [1 2] x))
    ([y x] (let [z (+ (last y) (last (butlast y)))]
             (if
                 (> z x) y
                 (fib-up-to (conj y z) x)))))

  (reduce + (filter even? (fib-up-to 4000000))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The prime factors of 13195 are 5, 7, 13 and 29.
;; What is the largest prime factor of the number 600851475143 ?
;; *** WARNING ***: TAKES ~2 MINUTES
(defn euler-3 []

  ;; test primality against a list of given primes
  (defn prime? [primes num]
    (loop [testing primes]
          (if (empty? testing) true
            (if (zero? (rem num (first testing))) false
              (recur (rest testing))))))

  (defn primes-up-to [num]
    (loop [primes [2 3] current 3]
          (if (> (* current current) num) primes
            (if (prime? primes current) (recur (conj primes current) (+ 2 current))
              (recur primes (+ 2 current))))))

  ;; return the last of the primes up to 600851475143 which is a
  ;; divisor of that number with zero reminder
  (last (filter #(zero? (rem 600851475143 %1)) (primes-up-to 600851475143))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; A palindromic number reads the same both ways.
;; The largest palindrome made from the product of two 2-digit
;; numbers is 9009 = 91 x 99.
;;
;; Find the largest palindrome made from the product of two 3-digit numbers.

(defn euler-4 []

  ;; convert number to seq, compare it to the seq's reverse
  (defn palin? [x] (= (seq (str x)) (reverse (seq (str x)))))

  ;; max elem on a double loop from 100 to 999 looking for palindromes
  (reduce max
   (loop [x 100 y 100 palindromes []]
         (if (palin? (* x y))
             (recur (inc x) y (conj palindromes (* x y)))
           (if (> x 999) (recur 100 (inc y) palindromes)
             (if (> y 999) palindromes
               (recur (inc x) y palindromes)))))))